// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tracking.sql

package database

import (
	"context"
)

const createTracking = `-- name: CreateTracking :exec
;

insert into session_tracking(
    latitude,
    longitude,
    altitude,
    time,
    session_id
) values (?, ?, ?, ?, ?)
`

type CreateTrackingParams struct {
	Latitude  float64
	Longitude float64
	Altitude  float64
	Time      string
	SessionID string
}

func (q *Queries) CreateTracking(ctx context.Context, arg CreateTrackingParams) error {
	_, err := q.db.ExecContext(ctx, createTracking,
		arg.Latitude,
		arg.Longitude,
		arg.Altitude,
		arg.Time,
		arg.SessionID,
	)
	return err
}

const getTrackingBySession = `-- name: GetTrackingBySession :many
select latitude, longitude, altitude, time, session_id
from session_tracking
where session_tracking.session_id = ?
`

func (q *Queries) GetTrackingBySession(ctx context.Context, sessionID string) ([]SessionTracking, error) {
	rows, err := q.db.QueryContext(ctx, getTrackingBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionTracking
	for rows.Next() {
		var i SessionTracking
		if err := rows.Scan(
			&i.Latitude,
			&i.Longitude,
			&i.Altitude,
			&i.Time,
			&i.SessionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
