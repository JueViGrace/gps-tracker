// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :exec
;

insert into session(
    id,
    refresh_token,
    access_token
)
values (?, ?, ?)
`

type CreateSessionParams struct {
	ID           string
	RefreshToken string
	AccessToken  string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.ID, arg.RefreshToken, arg.AccessToken)
	return err
}

const deleteSessionById = `-- name: DeleteSessionById :exec
delete from session
where id = ?
`

func (q *Queries) DeleteSessionById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionById, id)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
;

delete from session
where refresh_token = ? or access_token = ?
`

type DeleteSessionByTokenParams struct {
	RefreshToken string
	AccessToken  string
}

func (q *Queries) DeleteSessionByToken(ctx context.Context, arg DeleteSessionByTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByToken, arg.RefreshToken, arg.AccessToken)
	return err
}

const getSessionById = `-- name: GetSessionById :one
select id, refresh_token, access_token
from session
where id = ?
`

func (q *Queries) GetSessionById(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionById, id)
	var i Session
	err := row.Scan(&i.ID, &i.RefreshToken, &i.AccessToken)
	return i, err
}

const updateSession = `-- name: UpdateSession :exec
update session set
    refresh_token = ?,
    access_token = ?
where id = ?
`

type UpdateSessionParams struct {
	RefreshToken string
	AccessToken  string
	ID           string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.RefreshToken, arg.AccessToken, arg.ID)
	return err
}
